# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import companies_pb2 as companies__pb2


class CompaniesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCompany = channel.unary_unary(
                '/licenta.drona.companies.CompaniesService/CreateCompany',
                request_serializer=companies__pb2.CreateCompanyRequest.SerializeToString,
                response_deserializer=companies__pb2.CreateCompanyResponse.FromString,
                )
        self.GetCompanies = channel.unary_unary(
                '/licenta.drona.companies.CompaniesService/GetCompanies',
                request_serializer=companies__pb2.GetCompaniesRequest.SerializeToString,
                response_deserializer=companies__pb2.GetCompaniesResponse.FromString,
                )
        self.UpdateCompany = channel.unary_unary(
                '/licenta.drona.companies.CompaniesService/UpdateCompany',
                request_serializer=companies__pb2.UpdateCompanyRequest.SerializeToString,
                response_deserializer=companies__pb2.UpdateCompanyResponse.FromString,
                )
        self.DeleteCompany = channel.unary_unary(
                '/licenta.drona.companies.CompaniesService/DeleteCompany',
                request_serializer=companies__pb2.DeleteCompanyRequest.SerializeToString,
                response_deserializer=companies__pb2.DeleteCompanyResponse.FromString,
                )


class CompaniesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompaniesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompany,
                    request_deserializer=companies__pb2.CreateCompanyRequest.FromString,
                    response_serializer=companies__pb2.CreateCompanyResponse.SerializeToString,
            ),
            'GetCompanies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanies,
                    request_deserializer=companies__pb2.GetCompaniesRequest.FromString,
                    response_serializer=companies__pb2.GetCompaniesResponse.SerializeToString,
            ),
            'UpdateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompany,
                    request_deserializer=companies__pb2.UpdateCompanyRequest.FromString,
                    response_serializer=companies__pb2.UpdateCompanyResponse.SerializeToString,
            ),
            'DeleteCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompany,
                    request_deserializer=companies__pb2.DeleteCompanyRequest.FromString,
                    response_serializer=companies__pb2.DeleteCompanyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'licenta.drona.companies.CompaniesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompaniesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/licenta.drona.companies.CompaniesService/CreateCompany',
            companies__pb2.CreateCompanyRequest.SerializeToString,
            companies__pb2.CreateCompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/licenta.drona.companies.CompaniesService/GetCompanies',
            companies__pb2.GetCompaniesRequest.SerializeToString,
            companies__pb2.GetCompaniesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/licenta.drona.companies.CompaniesService/UpdateCompany',
            companies__pb2.UpdateCompanyRequest.SerializeToString,
            companies__pb2.UpdateCompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/licenta.drona.companies.CompaniesService/DeleteCompany',
            companies__pb2.DeleteCompanyRequest.SerializeToString,
            companies__pb2.DeleteCompanyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
