# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import drone_manager_pb2 as drone__manager__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DroneManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetGoal = channel.unary_unary(
                '/acs.drone_manager.DroneManager/SetGoal',
                request_serializer=drone__manager__pb2.SetGoalRequest.SerializeToString,
                response_deserializer=drone__manager__pb2.SetGoalResponse.FromString,
                )
        self.LandDrone = channel.unary_unary(
                '/acs.drone_manager.DroneManager/LandDrone',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=drone__manager__pb2.LandDroneResponse.FromString,
                )
        self.ReturnDrone = channel.unary_unary(
                '/acs.drone_manager.DroneManager/ReturnDrone',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=drone__manager__pb2.ReturnDroneResponse.FromString,
                )


class DroneManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetGoal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LandDrone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnDrone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DroneManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetGoal': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGoal,
                    request_deserializer=drone__manager__pb2.SetGoalRequest.FromString,
                    response_serializer=drone__manager__pb2.SetGoalResponse.SerializeToString,
            ),
            'LandDrone': grpc.unary_unary_rpc_method_handler(
                    servicer.LandDrone,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=drone__manager__pb2.LandDroneResponse.SerializeToString,
            ),
            'ReturnDrone': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnDrone,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=drone__manager__pb2.ReturnDroneResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'acs.drone_manager.DroneManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DroneManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetGoal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/acs.drone_manager.DroneManager/SetGoal',
            drone__manager__pb2.SetGoalRequest.SerializeToString,
            drone__manager__pb2.SetGoalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LandDrone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/acs.drone_manager.DroneManager/LandDrone',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            drone__manager__pb2.LandDroneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnDrone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/acs.drone_manager.DroneManager/ReturnDrone',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            drone__manager__pb2.ReturnDroneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
